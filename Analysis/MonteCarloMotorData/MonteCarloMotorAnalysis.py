# Analysis functions to operate on a folder generated by the monte carlo simulation of a motor


from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
from Helpers.data import plot_all_sims, read_sims


def plot_exit_pressures(sims):
    plot_all_sims(sims, y="nozzle.exit_pressure")

    plt.ylabel("Pressure (Pa)")
    plt.xlabel("Time (s)")
    plt.title("Exit Pressures")

def display_exit_pressures(sims):
    plot_exit_pressures(sims)
    
    plt.show()


def plot_with_size(x, y, s):
    for i in range(len(x) - 1):
        plt.plot(x[i:i+2], y[i:i+2], 'k', linewidth=s[i])


def display_CG_components(sim):
    x = sim["time"]
    # plt.plot(x, sim["ox_tank.oxidizer_center_of_mass"], alpha=[0.5])
    # plt.plot(x, sim["fuel_grain.total_CG"])
    mass_scaler = 0.3
    offset = 1.613
    dry_mass = 49.989
    dry_CG = 3.454

    # plt.plot(x, sim["ox_tank.oxidizer_center_of_mass"], color="b")
    plot_with_size(x, sim["ox_tank.oxidizer_center_of_mass"] + offset, sim["ox_tank.ox_mass"] * mass_scaler)
    
    # plt.plot(x, sim["fuel_grain.total_CG"], color="b")
    plot_with_size(x, sim["fuel_grain.total_CG"] + offset, sim["fuel_grain.fuel_mass"] * mass_scaler)

    plt.plot(x, sim["propellant_CG"] + offset)
    plt.plot([min(x), max(x)], [dry_CG] * 2)

    plt.plot(x, (dry_mass * dry_CG + sim["propellant_mass"] * (sim["propellant_CG"] + offset)) / (dry_mass + sim["propellant_mass"]))

    plt.axis([min(x), max(x), 6, 0])

    plt.show()



if __name__ == "__main__":
    # sims = read_sims("./Analysis/MontecarloMotorData/MotorMonteCarloAccurateLoadDistribution-Temporary")
    # display_exit_pressures(sims)


    df = pd.read_csv("./Analysis/MotorMonteCarloAccurateLoadDistribution/1.csv")
    print(df.keys())
    display_CG_components(df)


    pass